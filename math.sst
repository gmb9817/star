func abs(num n):
    if (n < 0):
        return -n;
    else:
        return n;
    end;
end;

func pow(num base, num exp):
    if (exp == 0):
        return 1;
    end;
    if (exp < 0):
        return 1 / pow(base, -exp);
    end;
    num half = pow(base, exp / 2);
    if (exp % 2 == 0):
        return half * half;
    else:
        return half * half * base;
    end;
end;

func gcd(num a, num b):
    while (b != 0):
        num temp = a % b;
        a = b;
        b = temp;
    end;
    return a;
end;

func lcm(num a, num b):
    return (a * b) / gcd(a, b);
end;

func factorial(num n):
    if (n <= 1):
        return 1;
    else:
        return n * factorial(n - 1);
    end;
end;

func fibonacciSeries(num n):
    li fibs = [];
    if (n < 0):
        error("n은 0 이상의 값이어야 합니다");
    end;
    fibs = fibs + [0];
    if (n == 0):
        return fibs;
    end;
    fibs = fibs + [1];
    num i = 2;
    while (i <= n):
        num next = fibs[i - 1] + fibs[i - 2];
        fibs = fibs + [next];
        i = i + 1;
    end;
    return fibs;
end;

func modExp(num base, num exp, num mod):
    num result = 1;
    base = base % mod;
    while (exp > 0):
        if (exp % 2 == 1):
            result = (result * base) % mod;
        end;
        exp = exp / 2;
        base = (base * base) % mod;
    end;
    return result;
end;

func nCr(num n, num r):
    return factorial(n) / (factorial(r) * factorial(n - r));
end;

func nPr(num n, num r):
    return factorial(n) / factorial(n - r);
end;

func fisPrime(num n):
    if (n < 2):
        return false;
    end;
    if (n == 2 or n == 3):
        return true;
    end;
    if (n % 2 == 0):
        return false;
    end;

    num s = 0;
    num d = n - 1;
    while (d % 2 == 0):
        d = d / 2;
        s = s + 1;
    end;

    li bases = [2, 3, 5, 7, 11];
    num i = 0;
    while (i < bases.size()):
        num a = bases[i];
        if (a > n - 2):
            break;
        end;
        num x = modExp(a, d, n);
        if (x == 1 or x == n - 1):
            i = i + 1;
            continue;
        end;
        num r = 1;
        bool passed = false;
        while (r < s):
            x = (x * x) % n;
            if (x == n - 1):
                passed = true;
                break;
            end;
            r = r + 1;
        end;
        if (not passed):
            return false;
        end;
        i = i + 1;
    end;

    return true;
end;

func primeFactors(num n):
    li factors = [];
    num i = 2;
    while (n > 1):
        if (n % i == 0):
            factors = factors + [i];
            n = n / i;
        else:
            i = i + 1;
        end;
    end;
    return factors;
end;

func sqrt(num n):
    if (n < 0):
        error("sqrt 함수: 음수 입력");
    end;
    num x = n;
    num y = (x + n / x) / 2;
    while (abs(x - y) > 0.0001):
        x = y;
        y = (x + n / x) / 2;
    end;
    return y;
end;

num NEXT = 1234;
func rand():
	NEXT = NEXT * 1103515245 + 12345;
	// NEXT >> 16
	return (NEXT / pow(2, 16));
end;

func pollardRho(num n):
	if (n % 2 == 0):
		return 2;
	end;
	if (fisPrime(n)):
		return n;
	end;
	num x = rand() % (n-2) + 2;
	num y = x;
	num c = rand() % 10 + 1;
	num g = 1;
	while (g == 1):
		x = (x*x % n + c) % n;
		y = (y*y % n + c) % n;
		y = (y*y % n + c) % n;

		g = gcd(abs(x-y), n);
		if (g == n):
			return pollardRho(n);
		end;
	end;
	if (fisPrime(g)):
		return g;
	end;
	return pollardRho(g);
end;
